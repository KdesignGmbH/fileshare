<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>File Manager - Secure File Upload</title>
    <link rel="stylesheet" href="./styles.css">
    <style>
        /* Unique styles for view_files.ejs */
        .container {
            max-width: 1200px;
            padding: 30px;
            margin: 0 auto;
        }

        .header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 30px;
            flex-wrap: wrap;
            gap: 20px;
        }

        h1 {
            font-size: 2rem;
        }

        .controls {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn {
            padding: 10px 20px;
            border-radius: 20px;
            font-size: 0.9rem;
        }

        .btn-danger {
            background: linear-gradient(135deg, #e74c3c 0%, #c0392b 100%);
        }

        .btn-danger:hover {
            box-shadow: 0 8px 16px rgba(231, 76, 60, 0.3);
        }

        .sort-controls {
            display: flex;
            gap: 10px;
            margin-bottom: 20px;
            flex-wrap: wrap;
        }

        select {
            padding: 8px 15px;
            border: 2px solid #e0e0e0;
            border-radius: 15px;
            font-size: 0.9rem;
            background: white;
        }

        .file-grid {
            display: grid;
            grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));
            gap: 20px;
        }

        .file-card {
            background: white;
            border-radius: 15px;
            padding: 20px;
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
            transition: all 0.3s ease;
            border: 1px solid #f0f0f0;
        }

        .file-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.15);
        }

        .file-info {
            margin-bottom: 15px;
        }

        .file-name {
            font-weight: 600;
            color: #333;
            margin-bottom: 5px;
            word-break: break-word;
        }

        .file-meta {
            color: #666;
            font-size: 0.85rem;
            display: flex;
            justify-content: space-between;
            margin-bottom: 5px;
        }

        .file-actions {
            display: flex;
            gap: 10px;
            flex-wrap: wrap;
        }

        .btn-small {
            padding: 6px 12px;
            font-size: 0.8rem;
            border-radius: 15px;
            flex: 1;
            min-width: 80px;
            text-align: center;
        }

        .empty-state {
            text-align: center;
            padding: 60px 20px;
            color: #666;
        }

        .empty-icon {
            font-size: 4rem;
            margin-bottom: 20px;
        }

        @media (max-width: 768px) {
            .header {
                flex-direction: column;
                align-items: flex-start;
            }

            .controls {
                width: 100%;
                justify-content: flex-start;
            }

            .file-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>

<body>
    <div class="container">
        <div class="header">
            <h1>üìÅ File Manager</h1>
            <div class="controls">
                <a href="/" class="btn">Upload New Files</a>
                <a href="/logout" class="btn">Logout</a>
            </div>
        </div>

        <div class="sort-controls">
            <select id="sortBy" onchange="sortFiles()">
                <option value="date">Sort by Upload Date</option>
                <option value="name">Sort by File Name</option>
                <option value="size">Sort by File Size</option>
            </select>
            <select id="sortOrder" onchange="sortFiles()">
                <option value="desc">Descending</option>
                <option value="asc">Ascending</option>
            </select>
        </div>
        <div class="file-grid" id="fileGrid">
            <% files.forEach(function(file) { %>
                <li>
                    <div class="file-card" data-name="<%= file.originalName %>" data-date="<%= file.uploadDate.getTime() %>"
                        data-size="<%= file.size %>">
                        <div class="file-info">
                            <div class="file-name"><%= file.originalName %></div>
                            <div class="file-meta">
                                <span>üìÖ <%= file.uploadDate.toLocaleDateString() %></span>
                                <span>üìè <%= (file.size / 1024 / 1024).toFixed(2) %> MB</span>
                            </div>
                            <div class="file-meta">
                                <span>üïí <%= file.uploadDate.toLocaleTimeString() %></span>
                            </div>
                        </div>
                        <div class="file-actions">
                            <a href="/download/<%= encodeURIComponent(file.name) %>" class="btn btn-small">Download</a>
                            <button onclick="deleteFile('<%= file.name %>')"
                                class="btn btn-danger btn-small">Delete</button>
                        </div>
                    </div>
                </li>
                <% }); %>
        </div>
    </div>

    <script>
        function sortFiles() {
            const sortBy = document.getElementById('sortBy').value;
            const sortOrder = document.getElementById('sortOrder').value;
            const fileGrid = document.getElementById('fileGrid');
            const fileCards = Array.from(fileGrid.querySelectorAll('.file-card'));

            fileCards.sort((a, b) => {
                let aValue, bValue;

                switch (sortBy) {
                    case 'name':
                        aValue = a.dataset.name.toLowerCase();
                        bValue = b.dataset.name.toLowerCase();
                        break;
                    case 'date':
                        aValue = parseInt(a.dataset.date);
                        bValue = parseInt(b.dataset.date);
                        break;
                    case 'size':
                        aValue = parseInt(a.dataset.size);
                        bValue = parseInt(b.dataset.size);
                        break;
                }

                if (sortOrder === 'asc') {
                    return aValue > bValue ? 1 : -1;
                } else {
                    return aValue < bValue ? 1 : -1;
                }
            });

            // Clear and re-append sorted cards
            fileGrid.innerHTML = '';
            fileCards.forEach(card => fileGrid.appendChild(card));
        }

        function deleteFile(filename) {
            if (confirm('Are you sure you want to delete this file? This action cannot be undone.')) {
                fetch(`/delete/${encodeURIComponent(filename)}`, {
                    method: 'DELETE'
                })
                    .then(response => {
                        if (response.ok) {
                            location.reload();
                        } else {
                            alert('Failed to delete file. Please try again.');
                        }
                    })
                    .catch(error => {
                        alert('Failed to delete file. Please try again.');
                    });
            }
        }

        // Initialize with default sort
        sortFiles();
    </script>
</body>

</html>